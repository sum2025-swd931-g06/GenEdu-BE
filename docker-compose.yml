networks:
  microservices-net:
    driver: bridge

volumes:
  pgdata_sql:
  pgdata_vector:
  pgadmin:

services:
  postgresql:
    container_name: ms_pg_sql
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      PGDATA: /data/postgres
    volumes:
      - pgdata_sql:/data/postgres
      - ./postgres_init.sql:/docker-entrypoint-initdb.d/postgres_init.sql
    hostname: postgresql
    ports:
      - "5432:5432"
    networks:
      - microservices-net
    restart: unless-stopped

  pgvector:
    container_name: ms_pg_vector
    image: pgvector/pgvector:pg16
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: postgres
      PGDATA: /data/postgres-vector
      DIMENSION: 768
    labels:
      - "org.springframework.boot.service-connection=postgres"
    volumes:
        - pgdata_vector:/data/postgres-vector
        - ./postgres_vector_init.sql:/docker-entrypoint-initdb.d/postgres_vector_init.sql
    hostname: pgvector
    ports:
      - 5434:5432
    networks:
      - microservices-net
    restart: unless-stopped

  pgadmin:
    container_name: ms_pgadmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - microservices-net
    restart: unless-stopped

  zipkin:
    container_name: zipkin
    image: openzipkin/zipkin
    hostname: "${ZIPKIN_SERVICE_HOST-zipkin}"
    ports:
      - "${ZIPKIN_SERVICE_PORT-9411}:9411"
    networks:
      - microservices-net

  keycloak:
    container_name: keycloak-ms
    image: quay.io/keycloak/keycloak:24.0.3
    command: 'start-dev --import-realm'
    hostname: "${KEYCLOAK_HOST-keycloak}"
    ports:
      - "${KEYCLOAK_PORT-9099}:8080"
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    networks:
      - microservices-net
    volumes:
      - ./identity/realm-export.json:/opt/keycloak/data/import/realm-export.json

  config-server:
    build: ./services/config-server
    container_name: config-service
    image: config-service:latest
    hostname: "${CONFIG_SERVER_HOST-config-server}"
    ports:
      - "${CONFIG_SERVER_PORT-8888}:8888"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://config-service:8888/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    env_file:
      - .env
    networks:
      - microservices-net

  discovery-service:
    build:
      context: ./services/discovery
      dockerfile: Dockerfile
    container_name: discovery-service
    hostname: "${DISCOVERY_SERVER_HOST-discovery-service}"
    image: discovery:latest
    depends_on:
      config-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://discovery-service:8761/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    ports:
      - "${DISCOVERY_SERVICE_PORT-8761}:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    env_file:
      - .env
    networks:
      - microservices-net

  gateway-service:
    build:
      context: ./services/gateway
      dockerfile: Dockerfile
    container_name: gateway-service
    hostname: "${GATEWAY_SERVICE_HOST-gateway-service}"
    image: gateway:latest
    ports:
      - "${GATEWAY_SERVICE_PORT-8222}:8222"
    healthcheck:
        test: ["CMD", "curl", "-f", "http://gateway-service:8222/actuator/health"]
        interval: 30s
        timeout: 10s
        retries: 3
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    env_file:
      - .env
    depends_on:
      config-server:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
      keycloak:
        condition: service_started
    networks:
      - microservices-net

  media-service:
    build:
      context: ./services/media
      dockerfile: Dockerfile
    container_name: media-service
    image: media:latest
    hostname: "${MEDIA_SERVICE_HOST-media-service}"
    ports:
      - "${MEDIA_SERVICE_PORT-8093}:8093"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://media-service:8093/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    env_file:
      - .env
    depends_on:
      config-server:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
      gateway-service:
        condition: service_healthy
      keycloak:
        condition: service_started
      postgresql:
        condition: service_started
    networks:
      - microservices-net

  content-service:
    build:
      context: ./services/content
      dockerfile: Dockerfile
    container_name: content-service
    image: content:latest
    hostname: "${CONTENT_SERVICE_HOST-content-service}"
    ports:
      - "${CONTENT_SERVICE_PORT-8091}:8091"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://content-service:8091/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    env_file:
      - .env
    depends_on:
      keycloak:
        condition: service_started
      postgresql:
        condition: service_started
      config-server:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
      gateway-service:
        condition: service_healthy
      media-service:
        condition: service_healthy
    networks:
      - microservices-net

  project-service:
    build:
      context: ./services/project
      dockerfile: Dockerfile
    container_name: project-service
    image: project:latest
    hostname: "${PROJECT_SERVICE_HOST-project-service}"
    ports:
      - "${PROJECT_SERVICE_PORT-8092}:8092"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://project-service:8092/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    env_file:
      - .env
    depends_on:
      keycloak:
        condition: service_started
      postgresql:
        condition: service_started
      config-server:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
      gateway-service:
        condition: service_healthy
      media-service:
        condition: service_healthy
      content-service:
        condition: service_healthy
    networks:
      - microservices-net

  lecture-content-service:
    build:
      context: ./services/lecture-content
      dockerfile: Dockerfile
    container_name: lecture-content-service
    image: lecture-content:latest
    hostname: "${LECTURE_CONTENT_SERVICE_HOST-lecture-content-service}"
    ports:
      - "${LECTURE_CONTENT_SERVICE_PORT-8096}:8096"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://lecture-content-service:8096/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    env_file:
      - .env
    depends_on:
      keycloak:
        condition: service_started
      postgresql:
        condition: service_started
      config-server:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
      gateway-service:
        condition: service_healthy
      media-service:
        condition: service_healthy
      content-service:
        condition: service_healthy
    networks:
      - microservices-net



